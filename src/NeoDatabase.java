/**
 * Student Name: Shenphen Yeshi
 * SBU ID: 113814349
 * Recitation 3
 */

import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.*;

import big.data.DataSource;

/**
 * NeoDatabase will contain and manage the NearEarthObject records which have been downloaded from the online dataset.
 */
public class NeoDatabase {
    public static final String API_KEY = "qllFghJrqSHVnohnoR35QZcpGzVW6gsypNx6pa7o";
    public static final String API_ROOT = "https://api.nasa.gov/neo/rest/v1/neo/browse?";
    private ArrayList<NearEarthObject> earthObjects;

    /**
     * Default Constructor
     */
    public NeoDatabase() {
    }

    /**
     * Builds a query URL given a page number.
     *
     * @param pageNumber Integer ranging from 0 to 715 indicating the page the user wishes to load.
     * @return (API_ROOT + " page = " + pageNumber + " & api_key = " + API_KEY)
     * @throws IllegalArgumentException If pageNumber is not in the valid range.
     */
    public String buildQueryURL(int pageNumber) throws IllegalArgumentException {
        if (pageNumber > 715 || pageNumber < 0) {
            throw new IllegalArgumentException("Page number not within valid range.");
        }
        return API_ROOT + "page=" + pageNumber + "&api_key=" + API_KEY;
    }

    /**
     * Opens a connection to the data source indicated by queryURL and adds all NearEarthObjects found in the dataset.
     *
     * @param queryURL String containing the URL requesting a dataset from the NASA NeoW service (should be generated by buildQueryURL() above).
     * @throws IllegalArgumentException If queryURL is null or could not be resolved by the server.
     */
    public void addAll(String queryURL) throws IllegalArgumentException {
        DataSource ds = DataSource.connectJSON(queryURL);
        ds.load();
        NearEarthObject[] nearEarthObjects = ds.fetchArray("NearEarthObject", "near_earth_objects/neo_reference_id", "near_earth_objects/name", "near_earth_objects/absolute_magnitude_h", "near_earth_objects/estimated_diameter/kilometers/estimated_diameter_min", "near_earth_objects/estimated_diameter/kilometers/estimated_diameter_max", "near_earth_objects/is_potentially_hazardous_asteroid", "near_earth_objects/close_approach_data/epoch_date_close_approach", "near_earth_objects/close_approach_data/miss_distance/kilometers", "near_earth_objects/close_approach_data/orbiting_body");
        earthObjects = new ArrayList<>(Arrays.asList(nearEarthObjects));
    }

    /**
     * Sorts the database using the specified Comparator of NearEarthObjects.
     *
     * @param comp Comparator of NearEarthObjects which will be used to sort the database.
     * @throws IllegalArgumentException If comp is null.
     */
    public void sort(Comparator<NearEarthObject> comp) throws IllegalArgumentException {
        if (comp == null) {
            throw new IllegalArgumentException("Comparator is empty.");
        }
        Collections.sort(earthObjects, comp);
    }

    /**
     * Displays the database in a neat, tabular form, listing all member variables for each NearEarthObject.
     */
    public void printTable() {
        System.out.println("     ID  \t |        \t\tName\t\t\t    |    \tMag.\t |   Diameter\t | \tDanger\t | \tClose Date\t | \tMiss Dist\t | \tOrbits\t");
        System.out.println("======================================================================================================================================");
        for (int x = 0; x < earthObjects.size(); x++) {
            System.out.printf("  %-14d %-38s %-13.1f %-13.3f %-11b %-15s %-16.0f %s", earthObjects.get(x).getReferenceID(), earthObjects.get(x).getName(), earthObjects.get(x).getAbsoluteMagnitude(), earthObjects.get(x).getAverageDiameter(), earthObjects.get(x).getIsDangerous(), getFormatDate(earthObjects.get(x).getClosestApproachDate()), earthObjects.get(x).getMissDistance(), earthObjects.get(x).getOrbitingBody() + "\n");
        }
    }

    /**
     * Custom method that returns the required formatted date using the DateFormat class.
     *
     * @param date The date object from the API.
     * @return A formatted date String variable.
     */
    public String getFormatDate(Date date) {
        DateFormat dateFormat = new SimpleDateFormat("MM-dd-yyyy");
        String formattedDate = dateFormat.format(date);
        return formattedDate;
    }
}
